// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Add } from "./add_reducer.ts";
export { Add };
import { AddObject } from "./add_object_reducer.ts";
export { AddObject };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { CreateAsset } from "./create_asset_reducer.ts";
export { CreateAsset };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { SayHello } from "./say_hello_reducer.ts";
export { SayHello };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { UpdatePosition } from "./update_position_reducer.ts";
export { UpdatePosition };
import { UpdateRotation } from "./update_rotation_reducer.ts";
export { UpdateRotation };

// Import and reexport all table handle types
import { AssetTableHandle } from "./asset_table.ts";
export { AssetTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { ObjectTableHandle } from "./object_table.ts";
export { ObjectTableHandle };
import { PersonTableHandle } from "./person_table.ts";
export { PersonTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Asset } from "./asset_type.ts";
export { Asset };
import { Message } from "./message_type.ts";
export { Message };
import { Object } from "./object_type.ts";
export { Object };
import { Person } from "./person_type.ts";
export { Person };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    asset: {
      tableName: "asset",
      rowType: Asset.getTypeScriptAlgebraicType(),
      primaryKey: "assetId",
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    object: {
      tableName: "object",
      rowType: Object.getTypeScriptAlgebraicType(),
      primaryKey: "objectId",
    },
    person: {
      tableName: "person",
      rowType: Person.getTypeScriptAlgebraicType(),
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    add: {
      reducerName: "add",
      argsType: Add.getTypeScriptAlgebraicType(),
    },
    add_object: {
      reducerName: "add_object",
      argsType: AddObject.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    create_asset: {
      reducerName: "create_asset",
      argsType: CreateAsset.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    say_hello: {
      reducerName: "say_hello",
      argsType: SayHello.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    update_position: {
      reducerName: "update_position",
      argsType: UpdatePosition.getTypeScriptAlgebraicType(),
    },
    update_rotation: {
      reducerName: "update_rotation",
      argsType: UpdateRotation.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Add", args: Add }
| { name: "AddObject", args: AddObject }
| { name: "ClientConnected", args: ClientConnected }
| { name: "CreateAsset", args: CreateAsset }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "SayHello", args: SayHello }
| { name: "SendMessage", args: SendMessage }
| { name: "SetName", args: SetName }
| { name: "UpdatePosition", args: UpdatePosition }
| { name: "UpdateRotation", args: UpdateRotation }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  add(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    Add.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add", __argsBuffer, this.setCallReducerFlags.addFlags);
  }

  onAdd(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("add", callback);
  }

  removeOnAdd(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("add", callback);
  }

  addObject(objectId: bigint, worldId: string, channelId: string, assetId: bigint, positionX: number, positionY: number, positionZ: number, rotationQuaternionX: number, scaleX: number, animState: string) {
    const __args = { objectId, worldId, channelId, assetId, positionX, positionY, positionZ, rotationQuaternionX, scaleX, animState };
    let __writer = new BinaryWriter(1024);
    AddObject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_object", __argsBuffer, this.setCallReducerFlags.addObjectFlags);
  }

  onAddObject(callback: (ctx: ReducerEventContext, objectId: bigint, worldId: string, channelId: string, assetId: bigint, positionX: number, positionY: number, positionZ: number, rotationQuaternionX: number, scaleX: number, animState: string) => void) {
    this.connection.onReducer("add_object", callback);
  }

  removeOnAddObject(callback: (ctx: ReducerEventContext, objectId: bigint, worldId: string, channelId: string, assetId: bigint, positionX: number, positionY: number, positionZ: number, rotationQuaternionX: number, scaleX: number, animState: string) => void) {
    this.connection.offReducer("add_object", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  createAsset(assetType: string, name: string, description: string, filePath: string, radius: number, targetY: number, materialType: string, prefferedScale: number) {
    const __args = { assetType, name, description, filePath, radius, targetY, materialType, prefferedScale };
    let __writer = new BinaryWriter(1024);
    CreateAsset.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_asset", __argsBuffer, this.setCallReducerFlags.createAssetFlags);
  }

  onCreateAsset(callback: (ctx: ReducerEventContext, assetType: string, name: string, description: string, filePath: string, radius: number, targetY: number, materialType: string, prefferedScale: number) => void) {
    this.connection.onReducer("create_asset", callback);
  }

  removeOnCreateAsset(callback: (ctx: ReducerEventContext, assetType: string, name: string, description: string, filePath: string, radius: number, targetY: number, materialType: string, prefferedScale: number) => void) {
    this.connection.offReducer("create_asset", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  sayHello() {
    this.connection.callReducer("say_hello", new Uint8Array(0), this.setCallReducerFlags.sayHelloFlags);
  }

  onSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("say_hello", callback);
  }

  removeOnSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("say_hello", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

  updatePosition(x: number, y: number, z: number) {
    const __args = { x, y, z };
    let __writer = new BinaryWriter(1024);
    UpdatePosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_position", __argsBuffer, this.setCallReducerFlags.updatePositionFlags);
  }

  onUpdatePosition(callback: (ctx: ReducerEventContext, x: number, y: number, z: number) => void) {
    this.connection.onReducer("update_position", callback);
  }

  removeOnUpdatePosition(callback: (ctx: ReducerEventContext, x: number, y: number, z: number) => void) {
    this.connection.offReducer("update_position", callback);
  }

  updateRotation(x: number) {
    const __args = { x };
    let __writer = new BinaryWriter(1024);
    UpdateRotation.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_rotation", __argsBuffer, this.setCallReducerFlags.updateRotationFlags);
  }

  onUpdateRotation(callback: (ctx: ReducerEventContext, x: number) => void) {
    this.connection.onReducer("update_rotation", callback);
  }

  removeOnUpdateRotation(callback: (ctx: ReducerEventContext, x: number) => void) {
    this.connection.offReducer("update_rotation", callback);
  }

}

export class SetReducerFlags {
  addFlags: CallReducerFlags = 'FullUpdate';
  add(flags: CallReducerFlags) {
    this.addFlags = flags;
  }

  addObjectFlags: CallReducerFlags = 'FullUpdate';
  addObject(flags: CallReducerFlags) {
    this.addObjectFlags = flags;
  }

  createAssetFlags: CallReducerFlags = 'FullUpdate';
  createAsset(flags: CallReducerFlags) {
    this.createAssetFlags = flags;
  }

  sayHelloFlags: CallReducerFlags = 'FullUpdate';
  sayHello(flags: CallReducerFlags) {
    this.sayHelloFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  updatePositionFlags: CallReducerFlags = 'FullUpdate';
  updatePosition(flags: CallReducerFlags) {
    this.updatePositionFlags = flags;
  }

  updateRotationFlags: CallReducerFlags = 'FullUpdate';
  updateRotation(flags: CallReducerFlags) {
    this.updateRotationFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get asset(): AssetTableHandle {
    return new AssetTableHandle(this.connection.clientCache.getOrCreateTable<Asset>(REMOTE_MODULE.tables.asset));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get object(): ObjectTableHandle {
    return new ObjectTableHandle(this.connection.clientCache.getOrCreateTable<Object>(REMOTE_MODULE.tables.object));
  }

  get person(): PersonTableHandle {
    return new PersonTableHandle(this.connection.clientCache.getOrCreateTable<Person>(REMOTE_MODULE.tables.person));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
